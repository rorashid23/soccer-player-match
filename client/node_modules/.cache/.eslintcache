[{"/Users/rohan/Desktop/Junior Yr/Junior Spring/CIS-550/Assignment 2/HW2/client/src/index.js":"1","/Users/rohan/Desktop/Junior Yr/Junior Spring/CIS-550/Assignment 2/HW2/client/src/pages/HomePage.js":"2","/Users/rohan/Desktop/Junior Yr/Junior Spring/CIS-550/Assignment 2/HW2/client/src/pages/PlayersPage.js":"3","/Users/rohan/Desktop/Junior Yr/Junior Spring/CIS-550/Assignment 2/HW2/client/src/pages/MatchesPage.js":"4","/Users/rohan/Desktop/Junior Yr/Junior Spring/CIS-550/Assignment 2/HW2/client/src/fetcher.js":"5","/Users/rohan/Desktop/Junior Yr/Junior Spring/CIS-550/Assignment 2/HW2/client/src/components/MenuBar.js":"6"},{"size":826,"mtime":1633261358000,"results":"7","hashOfConfig":"8"},{"size":5104,"mtime":1645467564038,"results":"9","hashOfConfig":"8"},{"size":16028,"mtime":1645470194569,"results":"10","hashOfConfig":"8"},{"size":12242,"mtime":1645468790540,"results":"11","hashOfConfig":"8"},{"size":1811,"mtime":1633347958000,"results":"12","hashOfConfig":"8"},{"size":862,"mtime":1633206560000,"results":"13","hashOfConfig":"8"},{"filePath":"14","messages":"15","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"16"},"1bu3dwp",{"filePath":"17","messages":"18","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"19","usedDeprecatedRules":"16"},{"filePath":"20","messages":"21","errorCount":0,"fatalErrorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"22","messages":"23","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"24","usedDeprecatedRules":"16"},{"filePath":"25","messages":"26","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"16"},{"filePath":"27","messages":"28","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"16"},"/Users/rohan/Desktop/Junior Yr/Junior Spring/CIS-550/Assignment 2/HW2/client/src/index.js",[],["29","30"],"/Users/rohan/Desktop/Junior Yr/Junior Spring/CIS-550/Assignment 2/HW2/client/src/pages/HomePage.js",["31"],"import React from 'react';\nimport {\n  Table,\n  Pagination,\n  Select\n} from 'antd'\n\nimport MenuBar from '../components/MenuBar';\nimport { getAllMatches, getAllPlayers } from '../fetcher'\nconst { Column, ColumnGroup } = Table;\nconst { Option } = Select;\n\n\nconst playerColumns = [\n  {\n    title: 'Name',\n    dataIndex: 'Name',\n    key: 'Name',\n    sorter: (a, b) => a.Name.localeCompare(b.Name),\n    render: (text, row) => <a href={`/players?id=${row.PlayerId}`}>{text}</a>\n  },\n  {\n    title: 'Nationality',\n    dataIndex: 'Nationality',\n    key: 'Nationality',\n    sorter: (a, b) => a.Nationality.localeCompare(b.Nationality)\n  },\n  {\n    title: 'Rating',\n    dataIndex: 'Rating',\n    key: 'Rating',\n    sorter: (a, b) => a.Rating - b.Rating\n    \n  },\n  // TASK 7: add a column for Potential, with the ability to (numerically) sort ,\n  {\n    title: 'Potential',\n    dataIndex: 'Potential',\n    key: 'Potential',\n    sorter: (a, b) => a.Potential - b.Potential\n  },\n  // TASK 8: add a column for Club, with the ability to (alphabetically) sort \n  {\n    title: 'Club',\n    dataIndex: 'Club',\n    key: 'Club',\n    sorter: (a, b) => a.Club.localeCompare(b.Club)\n  },\n  // TASK 9: add a column for Value - no sorting required\n  {\n    title: 'Value',\n    dataIndex: 'Value',\n    key: 'Value'\n  }\n];\n\nclass HomePage extends React.Component {\n\n  constructor(props) {\n    super(props)\n\n    this.state = {\n      matchesResults: [],\n      matchesPageNumber: 1,\n      matchesPageSize: 10,\n      playersResults: [],\n      pagination: null  \n    }\n\n    this.leagueOnChange = this.leagueOnChange.bind(this)\n    this.goToMatch = this.goToMatch.bind(this)\n  }\n\n\n  goToMatch(matchId) {\n    window.location = `/matches?id=${matchId}`\n  }\n\n  leagueOnChange(value) {\n    // TASK 2: this value should be used as a parameter to call getAllMatches in fetcher.js with the parameters page and pageSize set to null\n    // then, matchesResults in state should be set to the results returned - see a similar function call in componentDidMount()\n    getAllMatches(null, null, value).then(res => {\n      //console.log(res.results)\n      this.setState({ matchesResults: res.results })\n    })\n    \n  }\n\n  componentDidMount() {\n    getAllMatches(null, null, 'D1').then(res => {\n      //console.log(res.results)\n      this.setState({ matchesResults: res.results })\n    })\n\n    getAllPlayers().then(res => {\n      //console.log(res.results)\n      // TASK 1: set the correct state attribute to res.results\n      this.setState({ playersResults: res.results })\n    })\n\n \n  }\n\n\n  render() {\n\n    return (\n      <div>\n        <MenuBar />\n        <div style={{ width: '70vw', margin: '0 auto', marginTop: '5vh' }}>\n          <h3>Players</h3>\n          <Table dataSource={this.state.playersResults} columns={playerColumns} pagination={{ pageSizeOptions:[5, 10], defaultPageSize: 5, showQuickJumper:true }}/>\n        </div>\n        <div style={{ width: '70vw', margin: '0 auto', marginTop: '2vh' }}>\n          <h3>Matches</h3>\n          <Select defaultValue=\"D1\" style={{ width: 120 }} onChange={this.leagueOnChange}>\n            <Option value=\"D1\">Bundesliga</Option>\n             {/* TASK 3: Take a look at Dataset Information.md from MS1 and add other options to the selector here  */}\n             <Option value=\"SP1\">La Liga</Option>\n             <Option value=\"F1\">Ligue 1</Option>\n             <Option value=\"I1\">Serie A</Option>\n             <Option value=\"E0\">Premier League</Option>\n\n          </Select>\n          \n          <Table onRow={(record, rowIndex) => {\n    return {\n      onClick: event => {this.goToMatch(record.MatchId)}, // clicking a row takes the user to a detailed view of the match in the /matches page using the MatchId parameter  \n    };\n  }} dataSource={this.state.matchesResults} pagination={{ pageSizeOptions:[5, 10], defaultPageSize: 5, showQuickJumper:true }}>\n            <ColumnGroup title=\"Teams\">\n              {/* TASK 4: correct the title for the 'Home' column and add a similar column for 'Away' team in this ColumnGroup */}\n              <Column title=\"Home\" dataIndex=\"Home\" key=\"Home\" sorter= {(a, b) => a.Home.localeCompare(b.Home)}/>\n              <Column title=\"Away\" dataIndex=\"Away\" key=\"Away\" sorter= {(a, b) => a.Away.localeCompare(b.Away)}/>\n            </ColumnGroup>\n            <ColumnGroup title=\"Goals\">\n              {/* TASK 5: add columns for home and away goals in this ColumnGroup, with the ability to sort values in these columns numerically */}\n              <Column title=\"Home Goals\" dataIndex=\"HomeGoals\" key=\"HomeGoals\" sorter= {(a, b) => a.HomeGoals - b.HomeGoals}/>\n              <Column title=\"Away Goals\" dataIndex=\"AwayGoals\" key=\"AwayGoals\" sorter= {(a, b) => a.AwayGoals - b.AwayGoals}/>\n            </ColumnGroup>\n             {/* TASK 6: create two columns (independent - not in a column group) for the date and time. Do not add a sorting functionality */}\n            <Column title=\"Date\" dataIndex=\"Date\" key=\"Date\"/>\n            <Column title=\"Time\" dataIndex=\"Time\" key=\"Time\"/>\n          </Table>\n\n        </div>\n\n\n      </div>\n    )\n  }\n\n}\n\nexport default HomePage\n\n","/Users/rohan/Desktop/Junior Yr/Junior Spring/CIS-550/Assignment 2/HW2/client/src/pages/PlayersPage.js",["32","33","34","35","36"],"/Users/rohan/Desktop/Junior Yr/Junior Spring/CIS-550/Assignment 2/HW2/client/src/pages/MatchesPage.js",["37"],"import React from 'react';\r\nimport { Form, FormInput, FormGroup, Button, Card, CardBody, CardTitle, Progress } from \"shards-react\";\r\n\r\n\r\nimport {\r\n    Table,\r\n    Pagination,\r\n    Row,\r\n    Col,\r\n    Divider,\r\n\r\n} from 'antd'\r\n\r\nimport { getMatchSearch, getMatch } from '../fetcher'\r\n\r\n\r\nimport MenuBar from '../components/MenuBar';\r\n\r\nconst { Column, ColumnGroup } = Table;\r\n\r\n\r\nclass MatchesPage extends React.Component {\r\n    constructor(props) {\r\n        super(props)\r\n        this.state = {\r\n            awayQuery: \"\",\r\n            homeQuery: \"\",\r\n            matchesResults: [],\r\n            selectedMatchId: window.location.search ? window.location.search.substring(1).split('=')[1] : 0,\r\n            selectedMatchDetails: null\r\n\r\n        }\r\n\r\n        this.handleAwayQueryChange = this.handleAwayQueryChange.bind(this)\r\n        this.handleHomeQueryChange = this.handleHomeQueryChange.bind(this)\r\n        this.updateSearchResults = this.updateSearchResults.bind(this)\r\n        this.goToMatch = this.goToMatch.bind(this)\r\n\r\n    }\r\n\r\n\r\n\r\n    handleAwayQueryChange(event) {\r\n        this.setState({ awayQuery: event.target.value })\r\n    }\r\n\r\n    handleHomeQueryChange(event) {\r\n        // TASK 10: update state variables appropriately. See handleAwayQueryChange(event) for reference\r\n        this.setState({ homeQuery: event.target.value })\r\n\r\n    }\r\n    goToMatch(matchId) {\r\n        window.location = `/matches?id=${matchId}`\r\n    }\r\n\r\n    updateSearchResults() {\r\n        //TASK 11: call getMatchSearch and update matchesResults in state. See componentDidMount() for a hint\r\n        getMatchSearch(this.state.homeQuery, this.state.awayQuery, null, null).then(res => {\r\n            this.setState({ matchesResults: res.results })\r\n        })\r\n\r\n    }\r\n\r\n    componentDidMount() {\r\n        getMatchSearch(this.state.homeQuery, this.state.awayQuery, null, null).then(res => {\r\n            this.setState({ matchesResults: res.results })\r\n        })\r\n\r\n        getMatch(this.state.selectedMatchId).then(res => {\r\n            this.setState({ selectedMatchDetails: res.results[0] })\r\n        })\r\n\r\n\r\n\r\n\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div>\r\n                <MenuBar />\r\n                <Form style={{ width: '80vw', margin: '0 auto', marginTop: '5vh' }}>\r\n                    <Row>\r\n                        <Col flex={2}><FormGroup style={{ width: '20vw', margin: '0 auto' }}>\r\n                            <label>Home Team</label>\r\n                            <FormInput placeholder=\"Home Team\" value={this.state.homeQuery} onChange={this.handleHomeQueryChange} />\r\n                        </FormGroup></Col>\r\n                        <Col flex={2}><FormGroup style={{ width: '20vw', margin: '0 auto' }}>\r\n                            <label>Away Team</label>\r\n                            <FormInput placeholder=\"Away Team\" value={this.state.awayQuery} onChange={this.handleAwayQueryChange} />\r\n                        </FormGroup></Col>\r\n                        <Col flex={2}><FormGroup style={{ width: '10vw' }}>\r\n                            <Button style={{ marginTop: '4vh' }} onClick={this.updateSearchResults}>Search</Button>\r\n                        </FormGroup></Col>\r\n\r\n                    </Row>\r\n\r\n\r\n                </Form>\r\n                <Divider />\r\n                {/* TASK 12: Copy over your implementation of the matches table from the home page */}\r\n                <Table onRow={(record, rowIndex) => {\r\n                    return {\r\n                    onClick: event => {this.goToMatch(record.MatchId)}, // clicking a row takes the user to a detailed view of the match in the /matches page using the MatchId parameter  \r\n                    };\r\n                }} dataSource={this.state.matchesResults} pagination={{ pageSizeOptions:[5, 10], defaultPageSize: 5, showQuickJumper:true }}>\r\n                            <ColumnGroup title=\"Teams\">\r\n\r\n                            <Column title=\"Home\" dataIndex=\"Home\" key=\"Home\" sorter= {(a, b) => a.Home.localeCompare(b.Home)}/>\r\n                            <Column title=\"Away\" dataIndex=\"Away\" key=\"Away\" sorter= {(a, b) => a.Away.localeCompare(b.Away)}/>\r\n                            </ColumnGroup>\r\n                            <ColumnGroup title=\"Goals\">\r\n                                \r\n                            <Column title=\"Home Goals\" dataIndex=\"HomeGoals\" key=\"HomeGoals\" sorter= {(a, b) => a.HomeGoals - b.HomeGoals}/>\r\n                            <Column title=\"Away Goals\" dataIndex=\"AwayGoals\" key=\"AwayGoals\" sorter= {(a, b) => a.AwayGoals - b.AwayGoals}/>\r\n                            </ColumnGroup>\r\n\r\n                            <Column title=\"Date\" dataIndex=\"Date\" key=\"Date\"/>\r\n                            <Column title=\"Time\" dataIndex=\"Time\" key=\"Time\"/>\r\n                        </Table>\r\n                <Divider />\r\n                {this.state.selectedMatchDetails ? <div style={{ width: '70vw', margin: '0 auto', marginTop: '2vh' }}>\r\n                    <Card>\r\n                        <CardBody>\r\n\r\n\r\n                            <Row gutter='30' align='middle' justify='center'>\r\n                                <Col flex={2} style={{ textAlign: 'left' }}>\r\n                                    <CardTitle>{this.state.selectedMatchDetails.Home}</CardTitle>\r\n\r\n                                </Col>\r\n                                <Col flex={2} style={{ textAlign: 'center' }}>\r\n                                    {this.state.selectedMatchDetails.Date} at {this.state.selectedMatchDetails.Time}\r\n                                </Col>\r\n                                {/* TASK 13: Add a column with flex = 2, and text alignment = right to display the name of the away team - similar to column 1 in this row */}\r\n                                <Col flex={2} style={{ textAlign: 'right' }}>\r\n                                    <CardTitle>{this.state.selectedMatchDetails.Away}</CardTitle>\r\n                                </Col>\r\n\r\n                            </Row>\r\n                            <Row gutter='30' align='middle' justify='center'>\r\n                                <Col span={9} style={{ textAlign: 'left' }}>\r\n                                    <h3>{this.state.selectedMatchDetails.HomeGoals}</h3>\r\n                                </Col >\r\n                                <Col span={6} style={{ textAlign: 'center' }}>\r\n                                    Goals\r\n                                </Col >\r\n                                {/* TASK 14: Add a column with span = 9, and text alignment = right to display the # of goals the away team scored - similar 1 in this row */}\r\n\r\n                                <Col span={9} style={{ textAlign: 'right' }}>\r\n                                    <h3>{this.state.selectedMatchDetails.AwayGoals}</h3>\r\n                                </Col>\r\n                            </Row>\r\n                            {/* TASK 15: create a row for goals at half time similar to the row for 'Goals' above, but use h5 in place of h3!  */}\r\n                            <Row gutter='30' align='middle' justify='center'>\r\n                                <Col span={9} style={{ textAlign: 'left' }}>\r\n                                    <h5>{this.state.selectedMatchDetails.HTHomeGoals}</h5>\r\n                                </Col >\r\n                                <Col span={6} style={{ textAlign: 'center' }}>\r\n                                    Half Time Goals\r\n                                </Col >\r\n                                <Col span={9} style={{ textAlign: 'right' }}>\r\n                                    <h5>{this.state.selectedMatchDetails.HTAwayGoals}</h5>\r\n                                </Col>\r\n                            </Row>\r\n                            <Row gutter='30' align='middle' justify='center'>\r\n                                <Col span={9} style={{ textAlign: 'left' }}>\r\n                                <Progress value={this.state.selectedMatchDetails.ShotsOnTargetHome * 100 / this.state.selectedMatchDetails.ShotsHome}>{this.state.selectedMatchDetails.ShotsOnTargetHome} / {this.state.selectedMatchDetails.ShotsHome}</Progress>\r\n                                </Col >\r\n                                <Col span={6} style={{ textAlign: 'center' }}>\r\n                                    Shot Accuracy\r\n                                </Col >\r\n                                <Col span={9} style={{ textAlign: 'right' }}>\r\n                                    {/* TASK 18: add a progress bar to display the shot accuracy for the away team -  look at the progress bar in column 1 of this row for reference*/}\r\n                                    <Progress value={this.state.selectedMatchDetails.ShotsOnTargetAway * 100 / this.state.selectedMatchDetails.ShotsAway}>{this.state.selectedMatchDetails.ShotsOnTargetAway} / {this.state.selectedMatchDetails.ShotsAway}</Progress>\r\n                                </Col>\r\n                            </Row>\r\n                            <Row gutter='30' align='middle' justify='center'>\r\n                                <Col span={9} style={{ textAlign: 'left' }}>\r\n                                    <h5>{this.state.selectedMatchDetails.CornersHome}</h5>\r\n                                </Col >\r\n                                <Col span={6} style={{ textAlign: 'center' }}>\r\n                                    Corners\r\n                                </Col >\r\n                                <Col span={9} style={{ textAlign: 'right' }}>\r\n                                    <h5>{this.state.selectedMatchDetails.CornersAway}</h5>\r\n                                </Col>\r\n                            </Row>\r\n                            {/* TASK 16: add a row for fouls cards - check out the above lines for how we did it for corners */}\r\n                            <Row gutter='30' align='middle' justify='center'>\r\n                                <Col span={9} style={{ textAlign: 'left' }}>\r\n                                    <h5>{this.state.selectedMatchDetails.FoulsHome}</h5>\r\n                                </Col >\r\n                                <Col span={6} style={{ textAlign: 'center' }}>\r\n                                    Fouls\r\n                                </Col >\r\n                                <Col span={9} style={{ textAlign: 'right' }}>\r\n                                    <h5>{this.state.selectedMatchDetails.FoulsAway}</h5>\r\n                                </Col>\r\n                            </Row>\r\n                            <Row gutter='30' align='middle' justify='center'>\r\n                                <Col span={9} style={{ textAlign: 'left' }}>\r\n                                    <h5>{this.state.selectedMatchDetails.RCHome}</h5>\r\n                                </Col >\r\n                                <Col span={6} style={{ textAlign: 'center' }}>\r\n                                    Red Cards\r\n                                </Col >\r\n                                <Col span={9} style={{ textAlign: 'right' }}>\r\n                                    <h5>{this.state.selectedMatchDetails.RCAway}</h5>\r\n                                </Col>\r\n                            </Row>\r\n                            {/* TASK 17: add a row for yellow cards - check out the above lines for how we did it for red cards */}\r\n                            <Row gutter='30' align='middle' justify='center'>\r\n                                <Col span={9} style={{ textAlign: 'left' }}>\r\n                                    <h5>{this.state.selectedMatchDetails.YCHome}</h5>\r\n                                </Col >\r\n                                <Col span={6} style={{ textAlign: 'center' }}>\r\n                                    Yellow Cards\r\n                                </Col >\r\n                                <Col span={9} style={{ textAlign: 'right' }}>\r\n                                    <h5>{this.state.selectedMatchDetails.YCAway}</h5>\r\n                                </Col>\r\n                            </Row>\r\n\r\n                        </CardBody>\r\n                    </Card>\r\n                    \r\n                </div> : null}\r\n                <Divider />\r\n\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default MatchesPage\r\n\r\n","/Users/rohan/Desktop/Junior Yr/Junior Spring/CIS-550/Assignment 2/HW2/client/src/fetcher.js",[],"/Users/rohan/Desktop/Junior Yr/Junior Spring/CIS-550/Assignment 2/HW2/client/src/components/MenuBar.js",[],{"ruleId":"38","replacedBy":"39"},{"ruleId":"40","replacedBy":"41"},{"ruleId":"42","severity":1,"message":"43","line":4,"column":3,"nodeType":"44","messageId":"45","endLine":4,"endColumn":13},{"ruleId":"42","severity":1,"message":"46","line":2,"column":62,"nodeType":"44","messageId":"45","endLine":2,"endColumn":71},{"ruleId":"42","severity":1,"message":"43","line":6,"column":5,"nodeType":"44","messageId":"45","endLine":6,"endColumn":15},{"ruleId":"42","severity":1,"message":"47","line":7,"column":5,"nodeType":"44","messageId":"45","endLine":7,"endColumn":11},{"ruleId":"48","severity":1,"message":"49","line":205,"column":29,"nodeType":"50","endLine":205,"endColumn":144},{"ruleId":"48","severity":1,"message":"49","line":235,"column":37,"nodeType":"50","endLine":235,"endColumn":169},{"ruleId":"42","severity":1,"message":"43","line":7,"column":5,"nodeType":"44","messageId":"45","endLine":7,"endColumn":15},"no-native-reassign",["51"],"no-negated-in-lhs",["52"],"no-unused-vars","'Pagination' is defined but never used.","Identifier","unusedVar","'CardTitle' is defined but never used.","'Select' is defined but never used.","jsx-a11y/alt-text","Invalid alt value for img. Use alt=\"\" for presentational images.","JSXOpeningElement","no-global-assign","no-unsafe-negation"]